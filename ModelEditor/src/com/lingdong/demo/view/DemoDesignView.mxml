<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:controls="com.lingdong.demo.view.controls.*" 
		  xmlns:pages="com.lingdong.demo.view.pages.*" 
		  xmlns:layouts="com.lingdong.demo.view.layouts.*"
		  xmlns:view="com.lingdong.demo.view.*"
		  width="100%" height="100%" 
		  paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.lingdong.demo.controller.DemoController;
			import com.lingdong.demo.model.DemoDesigner;
			import com.lingdong.demo.model.DemoModel;
			import com.lingdong.demo.model.events.DemoModelEvent;
			import com.lingdong.demo.view.pages.DemoElementDisplay;
			import com.lingdong.demo.view.pages.DemoPageDisplay;
			import com.lingdong.demo.view.resources.DemoButtonDisplay;
			
			private function get designer():DemoDesigner
			{
				return DemoModel.instance.designer;
			}
			
			override protected function initializationComplete():void
			{
				super.initializationComplete();
				
				this.designer.addEventListener(DemoModelEvent.ACTIVE_THEME_CHANGE, onActiveThemeChange);
				this.designer.addEventListener(DemoModelEvent.ACTIVE_PAGE_CHANGE, onActivePageChange);
				this.designer.addEventListener(DemoModelEvent.ACTIVE_ELEMENT_CHANGE, onActiveElementChange);
			}
			
			private function onActiveThemeChange(event:Event):void
			{
				themeUI.theme = this.designer.activeTheme;
				thumbnailUI.theme = this.designer.activeTheme;
			}
			
			private function onActivePageChange(event:Event):void
			{
				themeUI.activePage = this.designer.activePage;
				thumbnailUI.activePage = this.designer.activePage;
			}
			
			private function onActiveElementChange(event:Event):void
			{
				themeUI.activeElement = this.designer.activeElement;
			}
			
			private static function getDisplay(object:*, clazz:Class):*
			{
				while (object)
				{
					if (object is clazz) return object;
					
					object = object.parent;
				}
				
				return null;
			}
			
			private function themeUI_doubleClickHandler(event:MouseEvent):void
			{
				var buttonDisplay:DemoButtonDisplay = getDisplay(event.target, DemoButtonDisplay);
				var pageDisplay:DemoPageDisplay = getDisplay(event.target, DemoPageDisplay);
				if (buttonDisplay && pageDisplay)
				{
					this.designer.activeTheme = pageDisplay.page.child;
				}
			}
			
			private function themeContainer_clickHandler(event:MouseEvent):void
			{
				var pageDisplay:DemoPageDisplay = getDisplay(event.target, DemoPageDisplay);
				DemoModel.instance.designer.activePage = pageDisplay ? pageDisplay.page : null;
				
				var elementDisplay:DemoElementDisplay = getDisplay(event.target, DemoElementDisplay);
				this.designer.activeElement = elementDisplay ? elementDisplay.element : null;
			}

			private function themeUI_selectedIndexChangeHandler(event:Event):void
			{
				this.designer.activePage = themeUI.activePage;
			}

			private function thumbnailUI_selectedIndexChangeHandler(event:Event):void
			{
				this.designer.activePage = thumbnailUI.activePage;
			}
		]]>
	</fx:Script>
	
	<controls:DemoComponentsPanel />
	
	<s:VGroup width="100%" height="100%">
		
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="100%" height="100%">
				<controls:DemoControlBar />
				
				<s:BorderContainer width="100%" height="100%" 
								   borderStyle="inset" backgroundColor="0xcccccc"
								   click="themeContainer_clickHandler(event)">
					<pages:DemoThemeDisplay id="themeUI" 
											selectedIndexChange="themeUI_selectedIndexChangeHandler(event)"
											doubleClickEnabled="true" doubleClick="themeUI_doubleClickHandler(event)" />
				</s:BorderContainer>
			</s:VGroup>
			
			<controls:DemoPropertiesPanel />
		</s:HGroup>
		
		<s:BorderContainer width="100%" height="150" borderStyle="inset" backgroundColor="0xcccccc">
			<pages:DemoThumbnailDisplay id="thumbnailUI" 
										selectedIndexChange="thumbnailUI_selectedIndexChangeHandler(event)"/>
		</s:BorderContainer>
	</s:VGroup>
</s:HGroup>
